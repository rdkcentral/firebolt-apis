name: Standalone MFOS Report job

on:
  workflow_dispatch:
  push:
    branches-ignore: [ main ]
  pull_request:
    types:
      - opened
    branches: [ main ]
env:
  HUSKY: 0

jobs:
  #RunStandaloneTests:
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Get an open-rpc from firebolt-apis
  #      run: |
  #        apt-get update && apt-get -y install jq curl
  #        echo "Clone firebolt-apis repo with pr branch"
  #        PR_BRANCH=$(echo "${{ github.event_name }}" | tr '[:upper:]' '[:lower:]')
  #        if [ "${PR_BRANCH}" == "pull_request" ]; then
  #          PR_BRANCH="${{ github.event.pull_request.head.ref }}"
  #        elif [ "${PR_BRANCH}" == "push" ]; then
  #          PR_BRANCH="${{ github.ref }}"
  #          PR_BRANCH="${PR_BRANCH#refs/heads/}"
  #        else
  #          echo "Unsupported event: ${{ github.event_name }}"
  #          exit 1
  #        fi
  #        git clone --branch ${PR_BRANCH} https://github.com/bpvstaty366/firebolt-apis.git
  #        echo "cd to firebolt-apis repo and compile firebolt-open-rpc.json"
  #        cd firebolt-apis
  #        npm i
  #        npm run compile
  #    - name: Start MFOS
  #      run: |
  #        ls
  #        echo "clone mfos repo and start it in the background"
  #        git clone https://github.com/rdkcentral/mock-firebolt.git
  #        cd mock-firebolt/server
  #        cp ../../firebolt-apis/dist/firebolt-open-rpc.json ../../mock-firebolt/server/src/firebolt-open-rpc.json
  #        jq 'del(.supportedOpenRPCs[] | select(.name == "core"))' src/.mf.config.SAMPLE.json > src/.mf.config.SAMPLE.json.tmp && mv src/.mf.config.SAMPLE.json.tmp src/.mf.config.SAMPLE.json
  #        jq '.supportedOpenRPCs += [{"name": "core","cliFlag": null,"cliShortFlag": null,"fileName": "firebolt-open-rpc.json","enabled": true}]' src/.mf.config.SAMPLE.json > src/.mf.config.SAMPLE.json.tmp && mv src/.mf.config.SAMPLE.json.tmp src/.mf.config.SAMPLE.json
  #        cp src/.mf.config.SAMPLE.json src/.mf.config.json
  #        npm install
  #        npm start &
  #    - name: Start FCA
  #      run: |
  #        ls
  #        echo "clone fca repo and start it in the background"
  #        PR_BRANCH="firecert-1722"
  #        echo "PR_BRANCH $PR_BRANCH"
  #        git clone --branch ${PR_BRANCH} https://github.com/bpvstaty366/firebolt-certification-app.git
  #        cd firebolt-certification-app
  #        npm install
  #        npm start &
  #        sleep 5s
  #    - name: Run Standalone tests
  #      run: |
  #        ls
  #        response=$(curl -X POST -H "Content-Type: application/json" -d '{
  #          "result": {
  #            "lmt": 0,
  #            "us_privacy": "1-N-",
  #            "discovery": {
  #              "navigateTo": {
  #                "action": "search",
  #                "data": {
  #                  "query": "{\"task\":\"runTest\",\"params\":{\"certification\":true,\"exceptionMethods\":[],\"methodsToBeExcluded\":[]},\"action\":\"CORE\",\"context\":{\"communicationMode\":\"SDK\"},\"metadata\":{\"target\":\"MFOS\",\"targetVersion\":\"NIL\",\"deviceModel\":\"NIL\",\"devicePartner\":\"Comcast\",\"fbVersion\":\"NA\"},\"asynchronous\":false,\"appType\":\"firebolt\"}"
  #                },
  #                "context": {
  #                  "source": "voice"
  #                }
  #              }
  #            }
  #          }
  #        }' http://localhost:3333/api/v1/state/method/parameters.initialization/result)
  #        echo "RESP: "
  #        echo $response
  #        npm install puppeteer
  #        echo "Start xvfb"
  #        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
  #        export DISPLAY=:99
#
  #        echo "Run headless browser script with puppeteer"
  #        node -e '
  #          const puppeteer = require("puppeteer");
  #          const fs = require("fs");
  #          (async () => {
  #            const browser = await puppeteer.launch({ headless: true, args: ["--no-sandbox", "--disable-gpu"] });
  #            const page = await browser.newPage();
  #
  #            // Enable console logging
  #            page.on("console", (msg) => {
  #            let logMessage="";
  #            if (msg.type().includes("log")) {
  #             logMessage = `${msg.text()}`;
  #             console.log(logMessage);
  #            }
  #           if (logMessage.includes("Response String:")) {
  #              const jsonStringMatch = logMessage.match(/Response String:(.*)/);
  #              if (jsonStringMatch && jsonStringMatch[1]) {
  #                try {
  #                  const jsonString = jsonStringMatch[1].trim();
  #                  const responseString = JSON.parse(jsonString);
  #                  console.log("Parsed JSON:", responseString);
  #                  const filePath="report.json"
  #                  fs.writeFileSync(filePath, JSON.stringify(responseString), "utf-8");
  #                  console.log(`Parsed JSON written to ${filePath}`);
  #                  // Exit the Node.js script
  #                  process.exit(0);
#
  #                } catch (error) {
  #                  console.error("Error parsing JSON:", error);
  #                }
  #              }
  #            }
  #          });
  #            // Navigate to the URL
  #            await page.goto("http://localhost:8081/?mf=ws://localhost:9998/12345&standalone=true");
  #
  #           // Sleep for 80 seconds (80,000 milliseconds)
  #           await new Promise(resolve => setTimeout(resolve, 80000));
#
  #            // Close the browser
  #            await browser.close();
  #          })();
  #        '
  #    - name: Upload report.json as an artifact
  #      uses: actions/upload-artifact@v2
  #      with:
  #        name: report-json
  #        path: report.json

  SendReportToPR:
  #  needs: RunStandaloneTests
    runs-on: ubuntu-latest

    steps:
     # - name: Download report.json artifact
     #   uses: actions/download-artifact@v2
     #   with:
     #     name: report-json
     #     path: ${{ github.workspace }}/report-json

      - name: Send report.json to PR
        run: |
          apt-get update && apt-get -y install jq curl
          ls
          # Create a comment with the contents of report.json
          reportPath="${{ github.workspace }}/report-json/report.json"
          reportPath='{ "A": "B" }'
          commentContent=$(cat $reportPath)

          # Get PR information
          echo $github.event_path
          PR_NUMBER=$(jq --raw-output .number "${{ github.event_path }}")

          # Comment on the PR
          echo "Sending report.json as a comment to PR #$PR_NUMBER"
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments" \
            --data "{\"body\":\"Here is the report.json file:\n\`\`\`\n${commentContent}\n\`\`\`\"}"

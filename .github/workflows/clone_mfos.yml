name: Standalone MFOS Report job

on:
  workflow_dispatch:
  push:
    branches-ignore: [ main ]
  pull_request:
    types:
      - opened
    branches: [ main ]
env:
  HUSKY: 0

jobs:
  StandaloneMFOS:
    runs-on: ubuntu-latest
    steps:
      - name: FCA Standalone Report
        run: |
          apt-get update && apt-get -y install jq curl
          echo "Clone firebolt-apis repo with pr branch"
          PR_BRANCH=$(echo "${{ github.event_name }}" | tr '[:upper:]' '[:lower:]')
          if [ "${PR_BRANCH}" == "pull_request" ]; then
            PR_BRANCH="${{ github.event.pull_request.head.ref }}"
          elif [ "${PR_BRANCH}" == "push" ]; then
            PR_BRANCH="${{ github.ref }}"
            PR_BRANCH="${PR_BRANCH#refs/heads/}"
          else
            echo "Unsupported event: ${{ github.event_name }}"
            exit 1
          fi
          git clone --branch ${PR_BRANCH} https://github.com/bpvstaty366/firebolt-apis.git
          echo "cd to firebolt-apis repo and compile firebolt-open-rpc.json"
          cd firebolt-apis
          npm i
          npm run compile
          cd ..
          echo "clone mfos repo and start it in the background"
          git clone https://github.com/rdkcentral/mock-firebolt.git
          cd mock-firebolt/server
          cp ../../firebolt-apis/dist/firebolt-open-rpc.json ../../mock-firebolt/server/src/firebolt-open-rpc.json
          jq 'del(.supportedOpenRPCs[] | select(.name == "core"))' src/.mf.config.SAMPLE.json > src/.mf.config.SAMPLE.json.tmp && mv src/.mf.config.SAMPLE.json.tmp src/.mf.config.SAMPLE.json
          jq '.supportedOpenRPCs += [{"name": "core","cliFlag": null,"cliShortFlag": null,"fileName": "firebolt-open-rpc.json","enabled": true}]' src/.mf.config.SAMPLE.json > src/.mf.config.SAMPLE.json.tmp && mv src/.mf.config.SAMPLE.json.tmp src/.mf.config.SAMPLE.json
          cp src/.mf.config.SAMPLE.json src/.mf.config.json
          npm install
          npm start &
          cd ..//..
          echo "clone fca repo and start it in the background"
          echo "PR_BRANCH $PR_BRANCH"
          git clone --branch ${PR_BRANCH} https://github.com/bpvstaty366/firebolt-certification-app.git
          cd firebolt-certification-app
          NEW_PLATFORM_LIST="['XCLASS', 'XRE_ThorXRE', 'default', 'mock-firebolt-os']"
          sed -i "s/\(PLATFORM_LIST: \)[^,]*\(,\)/\1$NEW_PLATFORM_LIST\2/" plugins/config.js
          npm install
          npm start &
          sleep 5s
          response=$(curl -X POST -H "Content-Type: application/json" -d '{
            "result": {
              "lmt": 0,
              "us_privacy": "1-N-",
              "discovery": {
                "navigateTo": {
                  "action": "search",
                  "data": {
                    "query": "{\"task\":\"runTest\",\"params\":{\"certification\":true,\"exceptionMethods\":[],\"methodsToBeExcluded\":[]},\"action\":\"CORE\",\"context\":{\"communicationMode\":\"SDK\"},\"metadata\":{\"target\":\"MFOS\",\"targetVersion\":\"NIL\",\"deviceModel\":\"NIL\",\"devicePartner\":\"Comcast\",\"fbVersion\":\"NA\"},\"asynchronous\":false,\"appType\":\"firebolt\"}"
                  },
                  "context": {
                    "source": "voice"
                  }
                }
              }
            }
          }' http://localhost:3333/api/v1/state/method/parameters.initialization/result)
          echo "RESP: "
          echo $response
          npm install puppeteer
          echo "Start xvfb"
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          export DISPLAY=:99

          echo "Run headless browser script"
          node -e '
            const puppeteer = require("puppeteer");

            (async () => {
              const browser = await puppeteer.launch({ headless: true, args: ["--no-sandbox", "--disable-gpu"] });
              const page = await browser.newPage();

              // Enable console logging
              page.on("console", (msg) => console.log(`[Browser Console] ${msg.type().substr(0, 3).toUpperCase()} ${msg.text()}`));

              // Navigate to the URL
              await page.goto("http://localhost:8081/?mf=ws://localhost:9998/12345&standalone=true");

              // Perform any additional actions as needed
      
              // Close the browser
            //  await browser.close();
            })();
          '
          echo "sleep 120s"
          sleep 120s
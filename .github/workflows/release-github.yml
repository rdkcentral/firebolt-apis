name: Release to GitHub and NPM
on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
      - 'next'
      - 'next-major'
      - 'proposed'
  pull_request:
    types: [opened, synchronize]
    branches:
      - 'next'
      - 'proposed'

env:
  HUSKY: 0
  SYSROOT_PATH: ${{ github.workspace }}/deps_install
  DEPS_FILE: ./src/cpp/.deps

jobs:
  setup_deps_release:
    runs-on: ubuntu-latest
    outputs:
      deps_cache_key: ${{ steps.cache-key.outputs.hash }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Generate Dependency Hash Key
        id: cache-key
        run: echo "hash=$(sha256sum ${{ env.DEPS_FILE }} | awk '{print $1}')" >> $GITHUB_OUTPUT

      - name: Restore Dependency Cache
        uses: actions/cache@v4
        id: cache-restore
        with:
          path: ${{ env.SYSROOT_PATH }}
          key: ${{ runner.os }}-deps-${{ steps.cache-key.outputs.hash }}

      - name: Build and Install System-Dependencies
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: |
          echo "Installing apt dependencies..."
          sudo apt-get update -y
          echo "Installing Boost..."
          sudo apt-get install -y libboost-all-dev

      - name: Build and Install Project Dependencies
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: |
          echo "Building dependencies..."
          mkdir -p ${{ env.SYSROOT_PATH }}
          ./.github/scripts/install-deps.sh --deps "${{ env.DEPS_FILE }}" --sysroot "${{ env.SYSROOT_PATH }}"
          echo "Dependencies built and installed to ${{ env.SYSROOT_PATH }}"

      - name: Cache Save Confirmation
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: echo "New dependency cache will be saved."

  release:
    name: Release
    permissions:
      contents: read
    needs: setup_deps_release
    runs-on: ubuntu-latest
    steps:
      #  Checkout/install project
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repo-token: ${{ secrets.SEMANTIC_RELEASE_BOT_PAT }}
          persist-credentials: false

      - name: Restore Dependency Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.SYSROOT_PATH }}
          key: ${{ runner.os }}-deps-${{ needs.setup_deps_release.outputs.deps_cache_key }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Set up NPM token
        env:
          NPM_TOKEN: ${{ secrets.SEMANTIC_RELEASE_NPM_TOKEN  }} # <-- allow npm publish for each workspace
        run: 'echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc'
      - name: Install dependencies
        run: npm ci

      # Set NPM_DIST_TAGS and DOCS_TAG if applicable based on branch
      - name: Set main tags
        if: github.ref_name == 'main' && github.event_name != 'pull_request'
        run: |
          echo "NPM_DIST_TAG=latest" >> $GITHUB_ENV
          echo "DOCS_TAG=latest" >> $GITHUB_ENV

      - name: Set next tags
        if: github.ref_name == 'next' && github.event_name != 'pull_request'
        run: |
          echo "NPM_DIST_TAG=next" >> $GITHUB_ENV
          echo "DOCS_TAG=next" >> $GITHUB_ENV

      - name: Set next-major tags
        if: github.ref_name == 'next-major' && github.event_name != 'pull_request'
        run: |
          echo "NPM_DIST_TAG=next-major" >> $GITHUB_ENV
          echo "DOCS_TAGE=next-major" >> $GITHUB_ENV

      - name: Set feature branch tags
        if: github.ref_name != 'main' && github.ref_name != 'next' && github.ref_name != 'next-major' && github.event_name != 'pull_request'
        run: |
          echo "NPM_DIST_TAG=test" >> $GITHUB_ENV
          echo "FEATURE_BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Set PR tags
        if: github.ref_name != 'main' && github.ref_name != 'next' && github.ref_name != 'next-major' && github.event_name == 'pull_request'
        run: |
          echo "NPM_DIST_TAG=test" >> $GITHUB_ENV
          echo "DOCS_TAG=pr-$(node ./src/js/version.mjs branch-to-prerelease ${{ github.head_ref }})" >> $GITHUB_ENV
          echo "FEATURE_BRANCH=${{ github.head_ref }}" >> $GITHUB_ENV

      # Perform real (When not a PR) or dry-run (When PR) semantic-release
      - name: Release mono-artifact to GitHub
        if: (github.ref_name != 'main' && github.event_name != 'pull_request') || github.event_name == 'workflow_dispatch'
        env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_BOT_PAT }} # <-- Allows semantic-release-bot to push changes to protected branches
        run: |
          git config --global --add safe.directory '*'
          npx semantic-release

      - name: Dry-run mono-artifact
        if: (github.ref_name == 'main' && github.event_name != 'workflow_dispatch') || github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_BOT_PAT }} # <-- Allows semantic-release-bot to push changes to protected branches
        run: npx semantic-release --dry-run

      - name: Build artifacts for feature branches
        if: github.ref_name != 'main' && github.ref_name != 'next' && github.ref_name != 'next-major'
        run: |
          PRERELEASE=$(node ./src/js/version.mjs branch-to-prerelease $FEATURE_BRANCH)
          node ./src/js/version.mjs latest-prerelease $PRERELEASE
          npm version prerelease --preid $PRERELEASE --git-tag-version false
          npm version prerelease --preid $PRERELEASE --workspaces --git-tag-version false
          npm run dist

      - name: Check if semantic-release created a build
        id: check_build
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = './src/sdks/core/dist/lib/firebolt.mjs';
            return fs.existsSync(path);

      - name: File Existence Output
        run: |
          echo "File exists: ${{ steps.check_build.outputs.result }}"

      - name: Install npm & apt dependencies
        run: |
          echo "Installing apt dependencies..."
          sudo apt update
          echo "Installing Boost..."
          sudo apt-get install -y libboost-all-dev cmake jq
          npm install

      - name: Get version from package.json
        run: |
          RELEASE_VERSION=$(jq -r ".version" ./package.json)
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          echo "RELEASE_VERSION=$RELEASE_VERSION"

      - name: Make Release package of firebolt-native APIs
        run: |
          ./.github/scripts/mk-release-package.sh \
            --version ${{ env.RELEASE_VERSION }} \
            --package firebolt-apis--core-sdk \
            --subpath ./src/cpp \
            --dst ${{ github.workspace }}/release

      - name: Make Release package of firebolt-native Demo
        run: |
          ./.github/scripts/mk-release-package.sh \
            --version ${{ env.RELEASE_VERSION }} \
            --package firebolt-apis--core-demo \
            --subpath ./src/cpp/demo \
            --dst ${{ github.workspace }}/release

      - name: Release Firebolt SDKs to NPM
        if: steps.check_build.outputs.result == 'true' && github.event_name != 'pull_request' && (github.ref_name != 'main' || github.event_name == 'workflow_dispatch')
        env:
          NPM_TOKEN: ${{ secrets.SEMANTIC_RELEASE_NPM_TOKEN  }} # <-- Allows semantic-release to publish to npm without 2 factor auth.
        run: |
          npm --version
          echo "NPM DIST TAG :: " $NPM_DIST_TAG
          npm publish --tag $NPM_DIST_TAG --workspaces

      - name: Deploy Core Native Sources
        id: deploy_runtime_apis_cpp
        if: ${{ env.DEPLOY_ARTIFACTS == 'true' }} && steps.check_build.outputs.result == 'true' && github.event_name != 'pull_request' && (github.ref_name != 'main' || github.event_name == 'workflow_dispatch')
        env:
          NPM_TOKEN: ${{ secrets.SEMANTIC_RELEASE_NPM_TOKEN  }}
        run: |
          echo "user=${{ secrets.CPP_ARTIFACT_USER }}"
          curl -v -u ${{ secrets.CPP_ARTIFACT_USER }}:${{ secrets.CPP_ARTIFACT_SECRET }} -T ${{ github.workspace }}/release/firebolt-apis--core-sdk-$RELEASE_VERSION.tar.gz "${{ vars.DEPLOY_URL }}"
          curl -v -u ${{ secrets.CPP_ARTIFACT_USER }}:${{ secrets.CPP_ARTIFACT_SECRET }} -T ${{ github.workspace }}/release/firebolt-apis--core-demo-$RELEASE_VERSION.tar.gz "${{ vars.DEPLOY_URL }}"

      - name: Upload native packages as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: release
          path: ${{ github.workspace }}/release

      - name: Dry-run Firebolt SDKs to NPM
        if: steps.check_build.outputs.result == 'true' && (github.ref_name == 'main' && github.event_name != 'workflow_dispatch')
        env:
          NPM_TOKEN: ${{ secrets.SEMANTIC_RELEASE_NPM_TOKEN  }} # <-- Allows semantic-release to publish to npm without 2 factor auth.
        run: npm publish --tag $NPM_DIST_TAG --workspaces --dry-run

      - name: Checkout firebolt GitHub.io repository
        if: steps.check_build.outputs.result == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_BOT_PAT }} # <-- Allows semantic-release-bot to push changes to protected branches
        run: |
          cd /tmp
          git clone https://rdkcentral:$GITHUB_TOKEN@github.com/rdkcentral/firebolt.git ./firebolt-docs

      - name: Release docs to GitHub.io
        if: steps.check_build.outputs.result == 'true' && (github.ref_name == 'main' || github.ref_name == 'next' || github.ref_name == 'next-major' || github.event_name == 'pull_request' || github.ref_name == 'feature/high-contrast-ui')
        env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_BOT_PAT }} # <-- Allows semantic-release-bot to push changes to protected branches
        run: |
          npm run publish:docs /tmp/firebolt-docs $DOCS_TAG
          cd /tmp/firebolt-docs
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"
          git add --all
          git diff-index --quiet HEAD || git commit -m "chore: Publish $DOCS_TAG"
          git push
